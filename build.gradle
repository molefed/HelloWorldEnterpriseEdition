buildscript {
    ext {
        springBootVersion = '2.5.6'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath group: 'cz.habarta.typescript-generator', name: 'typescript-generator-gradle-plugin', version: '2.31.861'
    }
}

plugins {
    id "com.moowork.node" version "1.3.1"
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'war'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'cz.habarta.typescript-generator'

sourceCompatibility = 11
targetCompatibility = 11

repositories {
    mavenCentral()
}

generateTypeScript {
    jsonLibrary = 'jackson2'
    classPatterns = [
            'ru.molefed.controller.dto.**'
    ]
    outputFile = 'build/generated-ts/JavaDto.d.ts'
    outputKind = 'global'
    declarePropertiesAsOptional = false
    namespace = 'DTO'
    customTypeNamingFunction = 'function(name, simpleName) { return name.substring(name.lastIndexOf(\'.\')+1); }'
    loggingLevel = 'Info'
}

tasks.withType(JavaCompile) {
    options.setAnnotationProcessorGeneratedSourcesDirectory(file("$projectDir/build/generated/java"))

    options.compilerArgs = [
            '-Amapstruct.unmappedTargetPolicy=IGNORE',
            '-Amapstruct.defaultComponentModel=spring',
            '-Amapstruct.verbose=true'
    ]
}

task webappNpmInstall(type: NpmTask) {
    onlyIf {
        project.hasProperty("production")
    }

    workingDir = file("${projectDir}/webapp")
    args = ['install']
}

task webappNpmBuild(type: NpmTask, dependsOn: ['webappNpmInstall', 'generateTypeScript']) {
    onlyIf {
        project.hasProperty("production")
    }

    workingDir = file("${projectDir}/webapp")
    args = ['run', 'build']
}

processResources {
    dependsOn 'copyWebappToBuild'
}

task copyWebappToBuild(type: Copy, dependsOn: 'webappNpmBuild') {
    onlyIf {
        project.hasProperty("production")
    }

    from "${projectDir}/webapp/build/"
    into "${buildDir}/resources/main/static"
}

ext {
    mapstructVersion = '1.4.2.Final'
    jupiterVersion = '5.7.1'
}

dependencies {
    implementation 'com.h2database:h2:1.3.148'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.javassist:javassist:3.27.0-GA' // run tests after remove it
    implementation 'org.liquibase:liquibase-core:4.3.2'
    implementation 'io.jsonwebtoken:jjwt:0.9.1'

    implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'com.h2database:h2:1.3.148'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'io.rest-assured:rest-assured:3.3.0'

    testImplementation "org.junit.jupiter:junit-jupiter-api:${jupiterVersion}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${jupiterVersion}"
}

test {
    useJUnitPlatform {
        includeEngines 'junit-jupiter'
    }
}
